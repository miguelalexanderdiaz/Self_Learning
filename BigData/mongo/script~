
use test

#load json
mongoimport --db test --collection bigdata --type json --file data.json

#Todos los restaurantes de la base de datos
db.bigdata.find()

#Todos los restaurantes: únicamente los campos restaurant_id, name, cuisine
db.bigdata.find({}, {"restaurant_id":1, "name":1, "cuisine":1})

#Todos los restaurantes: únicamente los campos restaurant_id, name, zipcode y SIN _id
db.bigdata.find({}, {"restaurant_id":1, "name":1, "address.zipcode":1, "_id":0})

#Restaurante en el borough “Manhattan”
db.bigdata.find({"borough":"Manhattan"})

#Restaurantes con “score” mayor que 90
db.bigdata.aggregate(
   [
	{$unwind: "$grades"},
     {
       $group:
         {
           _id: "$_id",
           avgScore: { $avg: "$grades.score" },
	   sumScore: { $sum: "$grades.score" },
	   name: { "$first": "$name" },
	   restaurant_id: { "$first": "$restaurant_id" },
           cuisine: { "$first": "$cuisine" }
         }
     },
     { $project:{"_id":1, "name":1, "sumScore":1, "avgScore":1, "restaurant_id":1, "cuisine":1}},
     { $match : { sumScore : {$gt:90} } }
   ]
)

#Restaurante con “score” mayor que 80 y menor que 90
db.bigdata.aggregate(
   [
	{$unwind: "$grades"},
     {
       $group:
         {
           _id: "$_id",
           avgScore: { $avg: "$grades.score" },
	   sumScore: { $sum: "$grades.score" },
	   name: { "$first": "$name" },
	   restaurant_id: { "$first": "$restaurant_id" },
           cuisine: { "$first": "$cuisine" }
         }
     },
     { $project:{"_id":1, "name":1, "sumScore":1, "avgScore":1, "restaurant_id":1, "cuisine":1}},
     { $match : { sumScore : {$gt:80, $lt:90} } }
   ]
)

#Restaurantes ubicados en “latitude” menor a -95.754168
db.bigdata.find({"address.coord.0":{$lt:-95.754168}}, {address:1})

#Restaurantes para los cuales “cuisine” es diferente de “American”, tiene un “grade” de “A” y no pertenece al “borough” “Brooklyn”

db.bigdata.find({$and:[{"cuisine":{$regex:"^((?!.*American.*).)*$"}}, {"grades.grade":"A"}, {"borough":{$ne:"Brooklyn"}}]}, {cuisine:1, "borough":1, "grades.grade":1})

#Restaurantes en los cuales el nombre comienza por la palabra “Wil”. (Hint: usar expresión regular sobre el campo “name”)
db.bigdata.find({"name":{$regex:"^Wil.*"}}, {name:1})

#Restaurantes en los cuales la “cuisine” NO es “American” NI “Chinese” O el “name” comienza por la palabra “Wil”. (Hint: utilizar los operadores $or y $and)

db.bigdata.find({$or:[ {$and:[{"cuisine":{$regex:"^((?!.*American.*).)*$"}}, {"cuisine":{$ne:"Chinese"}}]}, {"name":{$regex:"^Wil.*"}} ]}, {cuisine:1, "borough":1, "grades.grade":1})

#Restaurantes ordenados en ascendentemente por el “name”
db.bigdata.aggregate(
   [
     { $sort : { name : -1} }
   ]
)

#Restaurantes para los cuales el “address.street” existe. (Hint: utilizar operador $exists)
db.bigdata.find({ "address.street": { $exists: true, $ne: null } }, {"address.street":1})



